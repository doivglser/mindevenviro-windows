#!/bin/bash
# mindevenviro-debian sCRYPtUPdater
# syntax check and update to /urs/local/bin, /var/www/testphp, /usr/lib/cgi-bin
###     WARNING:    DON'T EDIT ANYTHING BELOW	###
LANG="C" ;

		if [ ! $EUID = 0 ] ;
	then
		sudo "$0" ;
else

IFS=$(echo -en "\n\b") ;
FILE="sCRYPtUPdater"
syntaxCHkr="shellcheck python perl php tidy " ;

# wholeC0unt4: to start by zero after first
wholeC0unt4="1" ;
# listONmest4tus: to print how many bytes you've changed the last file you've edited
listONmest4tus="0" ;
# excULEC0D3s
excULEC0D3s="SC2155,SC1090,SC2140,SC2012,SC2002,SC2009,SC2172,SC2162,SC2010,SC2126,SC2016,SC2034,SC2005,SC2013,SC2059,SC2086,SC2027,SC1091,SC2076,SC2116" ;

# update path
bashupdate_path="/usr/local/bin" ;
perlupdate_path="/usr/local/bin" ;
phpupdate_path="/var/www/html/testphp" ;
conffiles_path="/etc" ;
# update path END

# temp folder
		if [[ "$(df -h | grep -E shm$ | cut -f2 -d% | tr -d '\ ')" != '' ]] ;
	then
		tmpfolder="$(df -h | grep -E shm$ | cut -f2 -d% | tr -d '\ ')" ;
	else
		tmpfolder="/tmp" ;
fi
# temp folder END

> $tmpfolder/modified ;

sC4n(){
# toDayChanged: do a list of changed files in userHome.
excludES=$(find /home/$SUDO_USER/Downloads/ -type f);
toDayChanged=$(find "$userHome" -cmin -"$minut3S" \( ! -regex '.*/\..*' \) -type f | grep -vE '"$excludES"|mysql_cp_db_password|master|HEAD|COMMIT_EDITMSG|untitled|twmrc|config$|description|sample|index|exclude|refs|.md' 2>/dev/null | grep -vE '[a-z0-9]{38}' 2>/dev/null | grep -vE '.[a-z0-9A-Z]>{3}' 2>/dev/null) ;

			if [[ "$toDayChanged" != '' ]] ;
	then
			if [[ "$wholeC0unt4" = "0" ]] ;
	then
			wholeC0unt4=$(echo "$toDayChanged" | wc -l | tr -d ' ') ;
			prepare_ "$@"
	else
			prepare_ "$@"
fi
fi
}

prepare_(){
# listONme: put the list in reverse and take the take the last entry
listONme="$(echo "$toDayChanged" | sort -r | head -n"$wholeC0unt4" | tail -n1)" ;
# listONmeIS: to determine the file type to check the syntax
listONmeIS=$(echo "$listONme" | xargs file | cut -f2 -d:) ;
# takeLASTword1: put all slashes away so I can take the last word without a dot
takeLASTword1=$(echo "$listONme" | sed 's/\//\ /g' | wc -w) ;
# toC0pyIS: the file name taken away from absolute path
toC0pyIS=$(echo "$listONme" | sed 's/\//\ /g' | awk '{print $'"$takeLASTword1"'}') ;
# takeLASTword1: put all slashes away so I can take the filesuffix without a dot
takeLASTword2=$(echo "$listONme" | sed 's/\//\ /g' | sed 's/\./\ /g' | wc -w) ;
# fF1l3suffix: determine the file suffix
fF1l3suffix=$(echo "$listONme" | sed 's/\//\ /g'| sed 's/\./\ /g' | awk '{print $'"$takeLASTword2"'}') ;

			if [[ "$fF1l3suffix" = conf ]] ;
	then
			path_to_update=$conffiles_path ;
fi
			if [[ "$listONmeIS" =~ Python|Bourne-Again ]] ;
	then
			path_to_update=$bashupdate_path ;
fi
			if [[ "$listONmeIS" =~ PHP|HTML ]] ;
	then
			path_to_update=$phpupdate_path ;
fi
			if [[ "$listONmeIS" =~ Perl ]] ;
	then
			path_to_update=$perlupdate_path ;
fi

	if [ -e "$path_to_update/$toC0pyIS" ] ;
then
	if [[ "$(du -b "$listONme" 2>/dev/null | cut -f1)" -gt "$(du -b "$path_to_update/$toC0pyIS" 2>/dev/null | cut -f1)" ]] ;
then
	let listONmest4tus=$(du -b "$listONme" 2>/dev/null | cut -f1)-$(du -b "/usr/local/bin/$toC0pyIS" 2>/dev/null | cut -f1)
	diffANDchecksyntax "$@" ;

	elif [[ "$(du -b "$listONme" | cut -f1 2>/dev/null)" -lt "$(du -b "$path_to_update/$toC0pyIS" | cut -f1 2>/dev/null)" ]] ;
then
	let listONmest4tus=$(du -b "/usr/local/bin/$toC0pyIS" 2>/dev/null | cut -f1)-$(du -b "$listONme" 2>/dev/null | cut -f1)
	diffANDchecksyntax "$@" ;
else
		maincall "$@"
fi
	else
		touchtoC0pyinbin "$@" ;
fi
}

touchtoC0pyinbin(){

			echo -e "\033[1;32m new" ; printf "..%s.." "$toC0pyIS" ;
			echo -e "\033[1;32m\n" ;
			printf "type 'touch' here: " ; read -r ;

			if [[ "$REPLY" = "touch" ]] ;
		then
			touch "$path_to_update/$toC0pyIS" ;
			diffANDchecksyntax "$@" ;
		else
			echo -e "\033[0;35m \ntype correctly" ;
		fi
}

copyToPath(){
			if [[ "$listONmest4tus" -ge "0" ]] || [[ "$listONmest4tus" -lt "0" ]] ;
        then
			echo -e "\n" ;
			printf " :: update? | 'n' " ; read -r

			if [[ "$REPLY" != "n" ]] ;
		then
			if [[ "$listONmeIS" =~ HTML|XML ]] || [[ "$fF1l3suffix" = md ]] ;
		then
			echo -e "\n" ;
			sudo cp -f "$listONme" "$path_to_update/$toC0pyIS" ;
			sudo chown www-data:www-data "$path_to_update/$toC0pyIS" ;
			sudo chmod 0755 "$path_to_update/$toC0pyIS" ;
			figlet $toC0pyIS ;
			echo -e "\033[1;33m $toC0pyIS updated: $(date | awk '{print $4}')\n" | tee -a $tmpfolder/modified ;
			maincall "$@"

			elif [[ "$listONmeIS" =~ PHP ]] ;
		then
			echo -e "\n" ;
			sudo cp -f "$listONme" "$path_to_update/$toC0pyIS" ;
			sudo chown www-data:www-data "$path_to_update/$toC0pyIS" ;
			sudo chmod 0755 "$path_to_update/$toC0pyIS" ;
			figlet $toC0pyIS ;
			echo -e "\033[1;33m $toC0pyIS updated: $(date | awk '{print $4}')\n" | tee -a $tmpfolder/modified ;
			maincall "$@"

			elif [[ "$listONmeIS" =~ Perl ]] ;
		then
			echo -e "\n" ;
			sudo cp -f "$listONme" "$path_to_update/$toC0pyIS" ;
			sudo chown www-data:www-data "$path_to_update/$toC0pyIS" ;
			sudo chmod 0755 "$path_to_update/$toC0pyIS" ;
			figlet $toC0pyIS ;
			echo -e "\033[1;33m $toC0pyIS updated: $(date | awk '{print $4}')\n" | tee -a $tmpfolder/modified ;
			maincall "$@"

			elif [[ "$listONmeIS" =~ Bourne-Again ]] ;
		then
			echo -e "\n" ;
			sudo cp -f "$listONme" "$path_to_update/$toC0pyIS" ;
			sudo chown root:root "$path_to_update/$toC0pyIS" ;
			sudo chmod 4755 "$path_to_update/$toC0pyIS" ;
			sudo chmod u+s "$path_to_update/$toC0pyIS" ;
			figlet $toC0pyIS ;
			echo -e "\033[1;33m $toC0pyIS updated: $(date | awk '{print $4}')\n" | tee -a $tmpfolder/modified ;
			maincall "$@"

			elif [[ "$listONmeIS" =~ Python ]] ;
		then
			echo -e "\n" ;
			sudo cp -f "$listONme" "$path_to_update/$toC0pyIS" ;
			sudo chown root:root "$path_to_update/$toC0pyIS" ;
			sudo chmod 0755 "$path_to_update/$toC0pyIS" ;
			figlet $toC0pyIS ;
			echo -e "\033[1;33m $toC0pyIS updated: $(date | awk '{print $4}')\n" | tee -a $tmpfolder/modified ;
			maincall "$@"

			elif [[ "$fF1l3suffix" = conf ]] ;
		then
			echo -e "\n" ;
			sudo cp -f "$listONme" "$path_to_update/$toC0pyIS" ;
			sudo chown root:root "$path_to_update/$toC0pyIS" ;
			sudo chmod 0644 "$path_to_update/$toC0pyIS" ;
			figlet $toC0pyIS ;
			echo -e "\033[1;33m $toC0pyIS updated: $(date | awk '{print $4}')\n" | tee -a $tmpfolder/modified
			maincall "$@"
		else
			echo -e "\nYour scripts should have a SheBang entry on the first line. \n#!/usr/bin/env perl OR #!/bin/bash OR #!/usr/bin/env python OR <php OR <PHP \n On Windows additionally a file suffix correspondent to the SheBang. \n" ;
		fi
		else
			echo "\033[1;31m :: nothing updated" ;
			maincall "$@"
	fi
fi
}

cont1NU3(){
		if [[ $ch3kingSnx =~ $syntaxCHkr ]] ;
	then
		ps aux | grep -v grep | grep "$ch3kingSnx" | awk '{print $2}' | xargs sudo kill -15 ;
	else
		echo -e "\n ... aborted"
fi
}

diffANDchecksyntax(){
ch3kingSnx='' ;

			echo -e "\033[0;32m \n DIFF OF: $toC0pyIS\n\n" ;
			read -r -p "waiting..." ;
			diff -i "$listONme" "$path_to_update/$toC0pyIS" 2>/dev/null ;
			exitc0de=$(echo $?) ;

			if [[ "$exitc0de" != 1 ]] ;
		then
			ch3kingSnx='' ;
			listONmeIS='' ;
	fi
			read -r -p "check.syntax?" ;

			if [[ "$listONmeIS" =~ Bourne-Again ]] ;
		then
			ch3kingSnx="shellcheck" ;
			echo "$listONme" | xargs $ch3kingSnx -e "$excULEC0D3s" ;
			# 
			exitc0de=$(echo $?) ;

			elif [[ "$listONmeIS" =~ Python ]] ;
		then
			ch3kingSnx="python" ;
			echo "$listONme" | xargs $ch3kingSnx -m pdb ;
			exitc0de=$(echo $?) ;

			elif [[ "$listONmeIS" =~ PHP ]] ;
		then
			ch3kingSnx="php" ;
			echo "$listONme" | xargs $ch3kingSnx -l ;
			exitc0de=$(echo $?) ;

			elif [[ "$listONmeIS" =~ Perl ]] ;
		then
			ch3kingSnx="perl"
			echo "$listONme" | xargs $ch3kingSnx -wc ;
			exitc0de=$(echo $?) ;

			elif [[ "$listONmeIS" =~ HTML ]] ;
		then
			ch3kingSnx="tidy"
			echo "$listONme" | xargs $ch3kingSnx -e -q ;
			exitc0de=$(echo $?) ; 

			elif [[ "$fF1l3suffix" = md ]] ;
		then
			echo -e "\n ... your text file changed" ;
			exitc0de=$(echo $?) ; 

			elif [[ "$fF1l3suffix" = conf ]] ;
		then
			ch3kingSnx="nano"
			echo "$listONme" | xargs $ch3kingSnx ;
			exitc0de=$(echo $?) ;
	else
			echo -e "\nYour scripts should have a SheBang entry on the first line. \n#!/usr/bin/env perl OR #!/bin/bash OR #!/usr/bin/env python OR <php OR <PHP \n On Windows additionally a file suffix correspondent to the SheBang. \n" ;
fi
			if [[ "$exitc0de" != 0 ]] ;
		then
			# to handle hgetcontents errors referring UTF-8
			tr -cd '\11\12\15\40-\176' < $listONme > $tmpfolder/sCRYPtUPdater.tmp
			# copy the clean file if new old file is bigger

				if [[ $tmpfolder/sCRYPtUPdater.tmp < $listONme ]]
			then
				cp -f $tmpfolder/sCRYPtUPdater.tmp $listONme ;
		fi
			# by error edit?
			printf "Do you want to re-edit? "; read -r

					if [[ "$REPLY" = "ok" ]] ;
				then
					nano "$listONme" && diffANDchecksyntax "$@" ;
			else
					echo -e "\033[0;35m \n :: REMEMBER ::  $listONme\n" ;
					ch3kingSnx='' ;
				fi
	fi
			# copy if no error else nothing to update
					if [[ $ch3kingSnx = '' ]] ;
		then
			echo -e "\033[0;36m \nnothing to update.\n" ;
		else
			echo -e "\033[0;32m \n $listONme appears to be ok" ;
			perl -i -pe 'y|\r||d' "$listONme" ;
			copyToPath "$@" ;
		fi
}

exxiterr(){
	# User Host Control
	echo -e "sCRYPtUPdater $(date) :: as ${SUDO_USER} :: in $(uname -n) :: changed:\n $(cat $tmpfolder/modified)" >> "/home/$SUDO_USER/.wH0rUNSon" ;
	# User Host Control END
	echo "good by $SUDO_USER."
	# if contributor, update the README.md with code stats
	codecounter &
	wait ;
	exit 0 ;
	}

# loop
maincall(){

		while trap 'cont1NU3' SIGQUIT && trap 'exxiterr' SIGINT ;
	do
        if [ -e "/home/$SUDO_USER/.installed" ] ;
    then
		((wholeC0unt4--)) ;

		if [[ "$listONmest4tus" != "0" ]] ;
	then
		if [[ "$listONmest4tus" = "1" ]] ;
	then
		bYT3S="byte" ;
	else
		bYT3S="bytes" ;
fi
		echo -e "\033[1;31m \nYou changed $listONmest4tus $bYT3S" && read -r -p "waiting..." ;
		sC4n "$@" ;
	else
		listONmest4tus="0" ;
		echo -e "\033[1;34m \nno.changes" && read -r -p "waiting..." ;
		sC4n "$@" ;
fi
	else
		echo -e "\n download M1ND3V3NV1R0 from https://github.com/doivglser \n or touch /home/$SUDO_USER/.installed" && exit 2 ;
fi
	done
}
# loop END

# HELP
help(){
shift 0 ;
echo -e "hello $SUDO_USER\n\n BASH/PYTHON to: /usr/local/bin\n PHP to: /var/www/html/testphp\n PERL to: /usr/lib/cgi-bin\n" ;
echo -e "Usage: $0 [-w|--workflow-interval] [WORKFLOW-INTERVAL in minutes] [work-directorie] [-h|--help]\r" ;
exit 0 ;
}
# help END

# ASK
  case "$1" in
        -w|--workflow-interval)
      minut3S=$2
      userHome=$3
      toshiffta=$(echo "$minut3S $userHome" | wc -w) ;
      shift "$toshiffta" ;
      maincall ;
      ;;
   -h|--help)
      toshiffta=0 ;
      shift "$toshiffta" ;
      help ;
      ;;
  esac
# ASK END

# execute
		if [[ $1 = '' ]] && [[ "$minut3S" = '' ]] || [[ "$userHome" = '' ]] ;
	then
		echo "please sudo this script."
		echo "Try 'sudo $0 --help' for more information."
		exit 0 ;
	else
		maincall ;
	fi
fi
# execute END
