#!/bin/bash
# mindevenviro mysql_cp_db
# FUNCTION: SEARCH ::
# to search tables related with short preffixes in a database. I write something to search in tables.

# FUNCTION: ERASE ::
# shell function to delete  id's that points for a template that is not present, in joomla. link:
# [joomla-root]/administrator/index.php?option=com_installer&view=manage
# choose from search menu: "SuchWerkzeuge" and "Deaktiviert" and look for "upper-case
# Those capitalized links," that are related to "menue entries" that doesnt work any more, 
# because the joomla backend couldn't properly remove all mysql entries or 
# where deletet bevor deinstallation of the template.
### (doesnt work at all, with delete by ID=1, then no admin rights more)

# FUNCTION: BACKUP ::
# to rename a database from an other database putting tables from the backup-database in the new one
# replacement for the "rename database" command from mariadb
# A database can be renamed with all tables from an other database, but with mysql errors.

# FUNCTION: RESTORE ::
# to restore a database from a .sql file

# FUNCTION: DUMP ::
# to dump a database to a .sql file
# 			WARNING DONT EDIT ANITHING BELOW ::

LANG=C ;
p4SSWORD='' ;
		if [ $EUID != 0 ]
	then
		echo -e "\nPlease sudo this $1 :) \r" ;
	else

FILE="mysql_cp_db" ;

# temp folder
                if [[ "$(df -h | grep -E shm$ | cut -f2 -d% | tr -d '\ ')" != '' ]] ;
        then
                #shm volatile
                tmpfolder="$(df -h | grep -E shm$ | cut -f2 -d% | tr -d '\ ')" ;
        else
                tmpfolder="/tmp" ;
fi
#               temp folder END

configfile="/etc/mysql_cp_db_password.conf" ;
configfile_secured="$tmpfolder/mysql_cp_db_password.conf" ;
# check if the file contains something we don't want
	if egrep -q -v '^#|^[^ ]*=[^;]*' "$configfile" ;
then
	echo "clening config file..." >&2
	# filter the original to a new file
	egrep '^#|^[^ ]*=[^;&]*'  "$configfile" >| "$configfile_secured"
	configfile="$configfile_secured"
fi

# now source it, either the original or the filtered variant
source "$configfile" ;

# where is program
dbserver=$(whereis mysql | cut -f2 -d: | awk '{print $1}');
# var for connect
mysqlconn="$dbserver -u root -p"$p4SSWORD"" ;
#

echo -e "mysql_cp_db $(date) :: as $USER :: in $(uname -n) :: in $HOME :: WORK -" >>"$HOME/.wH0rUNSon" ;

# search in database
search(){
# ask
ls_dbs ;
echo -e "SEARCH IN DATABASE\r" ;
printf "from db: "; read db002
echo -e " TO GREP\r" ;
printf "word: "; read to_grep01
# .
# fullfillment filter, if true you can loss all your data, please, do a dump bevor.

	if [[ $db002 != '' ]] && [[ $to_grep01 != '' ]] ;
then
	$mysqlconn -e "use $db002; show TABLES;" | cut -f1 -d\| | grep $to_grep01 ;
else
	meldig=" Insert 'from db' field and 'to grep' field please" ;
	read -p "$meldig" ;
fi
# 		fulfillment filter END
}
# 		search in database END

# erase from tables
erase(){
# ask
ls_dbs ;
echo -e "DELETE FROM TABLE\r" ;
printf "from db: "; read db001
echo -e "\rtype in ID's with a blank space as a separator\r" ;
printf "where id's: "; read idS0

# fullfillment filter, if true you can loss all your data, please, do a dump bevor.
	if [[ $db001 != '' ]] && [[ $idS0 != '' ]]
then
	for in_tables in $($mysqlconn -e "use $db001; show TABLES;" | cut -f1 -d\|;) ; # db + tables listing
do
	listnumb=$(echo "$in_tables" | wc -l) ; # number of tables for loop - control
	let nnumber=$listnumb+1 ; # add + one to decrease the $nnumber var

		if [[ $nnumber != 0 ]] ;
	then
		while read line
	do
		((nnumber--)) ; # decrease $nnumber
		table=$line; # save var $line in $table

		for idS0s in $(echo "$idS0" | wc -w) ; # number of ID's to delete
	do
		let idNNUMBERs=$idS0s+1 ; # add + one to decrease the $idNNUMBERs var
			while read line
		do
			((idNNUMBERs--)) ; # decrease $idNNUMBERs
			iD1=$(echo "$idS0" | awk '{print $'"$idNNUMBERs"'}' | tr -d '\ ') ;
#			$mysqlconn -e "use $db001; delete from $table where id $iD1" && wait ;
			$mysqlconn -e "use $db001; delete from $table where id in ($iD1)" && wait ;
			done<<<$idNNUMBERs
# .
		done

	done<<<$in_tables
	else
		exit 0;
	fi
	done
else
	meldig=" Insert 'from db' field and 'where ids' field please" ;
	read -p "$meldig" ;
fi
# 		fulfillment filter END
}
# 		delete from tables END

# backup (doesnt work properly)
# Rename Table comand in mysql 5.x above doesnt exist any more.
# To rename a whole db, have must to copy all tables, from an other db that doesnt exist.
# Error, table in wrong trigger, sometimes index error's
backup(){
# ask
ls_dbs ;
echo -e "RENAME DATABASE\r" ;
printf "back_up_db: "; read olddb
echo -e "\r" ;
printf "new_db: "; read newdb

# fullfillment filter, if true you can loss all your data, please, do a dump bevor.

	if [[ $olddb != '' ]] && [[ $newdb != '' ]] ;
then
	$mysqlconn -e "DROP DATABASE $newdb" ;
	sleep 0.5 ;
	$mysqlconn -e "CREATE DATABASE $newdb" ;
	params=$($mysqlconn -N -e "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='$olddb'") ;

	for name in $params;
do
		$mysqlconn -e "RENAME TABLE $olddb.$name to $newdb.$name" ;
	done;

else
	meldig=" Insert 'backup_up_db' field and 'new_db' field please" ;
	read -p "$meldig" ;
fi
# 		fulfillment filter END
}
# 		backup END

# restore
restore(){
# ask
ls_dbs ;
echo -e "RESTORE FROM .SQL FILE\r" ;
echo -e " type in with [dot]sql suffix\r" ;
printf "origin_data: "; read origin_data ;
echo -e "\r" ;
printf "target_data: "; read target_data ;
echo -e "\r... just few seconds, while copying tables's" ;

# fullfillment filter, if true you can loss all your data, please, do a dump bevor.
	if [[ $origin_data != '' ]] && [[ $target_data != '' ]] ;
then
	$mysqlconn $target_data < "$HOME/$origin_data" ;
else
	meldig=" Insert 'origin_data' field and 'target_data' field please" ;
	read -p "$meldig" ;
fi
# 		fulfillment filter END

}
# 		restore END

# dump from
dump(){
# ask
ls_dbs ;
echo -e "DUMP FROM DATABASE TO .SQL FILE\r" ;
printf "origin_data: "; read origin_data ;
echo -e "\rtype in with [dot]sql suffix\r" ;
printf "target_data: "; read target_data ;
echo -e "\r... just few seconds, while copying db's" ;

# fullfillment filter, if true you can loss all your data, please, do a dump bevor.
	if [[ $origin_data != '' ]] && [[ $target_data != '' ]] ;
then
	mysqldump -uroot -p$p4SSWORD $origin_data >| "$HOME/$target_data" ;
else
	meldig=" Insert 'origin_data' field and 'target_data' field please"
	read -p "$meldig" ;
fi
# 		fulfillment filter END
}
# 		dump from END

# .
# list databases
ls_dbs(){
	$mysqlconn -e "SHOW DATABASES;" ;
}

# HELP
help(){
echo "Usage: $0 [-d|--dump] [-r|--restore] [-b|--backup] [-e|--erase] [-s|--search] [-h|--help]" ;
echo -e "\n mysql_cp_db: To rename databases, overwrite old dbs with backup_database.tables,\rdump and restore .sql, on localhost\n
FUNCTION: SEARCH ::\r
 search in a database, I write something to search in tables..\r
FUNCTION: ERASE ::\r
 workaround to delete false entries in joomla, where id's\r
 selected from: [joomla-root]/administrator/index.php?option=com_installer&view=manage\r
 choose from search menu: SuchWerkzeuge and Deaktiviert\r
 couldn't be properly de-installed and deleted by joomla backend itself\r
 Names appears capitalized , as dead links without .php or .ini or .xml files in your\r
FUNCTION: BACKUP ::\r
 to rename a database from an other database putting tables from the backup-database in the new one\r
FUNCTION: RESTORE ::\r
 to restore a database from a .sql file\r
FUNCTION: DUMP ::\r
 to dump a database to a .sql file\r
MariaDB command-line tool: $(whereis mysql | cut -f2 -d: | awk '{print $1}');\n" ;
	}

# ASK
  case "$1" in
   -d|--dump)
      REPLY="dump"
      shift
      ;;
   -r|--restore)
      REPLY="restore"
      shift
      ;;
   -b|--backup)
      REPLY="backup"
      shift
      ;;
   -e|--erase)
      REPLY="erase"
      shift
      ;;
   -s|--search)
      REPLY="search"
      shift
      ;;
   -h|--help)
      REPLY="help"
      shift
      ;;
  esac

trap 'pgrep $FILE | awk "{print $1}" | xargs kill -9 && pgrep less | awk "{print $1}" | xargs kill -9;' SIGINT ;

	if [[ $REPLY = "dump" ]] ;
then
	echo -e "\r... just few seconds, while dumpping db's\r" ;
	dump ;

	elif [[ $REPLY = "restore" ]] ;
then
	echo -e "\r... just few seconds, while restoring db's\r" ;
	restore ;

	elif [[ $REPLY = "backup" ]] ;
then
	echo -e "\r... just few seconds, while backup db's\r" ;
	backup ;
	elif [[ $REPLY = "search" ]] ;
then
	echo -e "\r... just few seconds, while searching db's" ;
	search ;

	elif [[ $REPLY = "erase" ]] ;
then
	echo -e "\r... just few seconds, while deleting db's\r" ;
	erase ;

	elif [[ $REPLY = "help" ]] ;
then
	echo -e "HELP: $0\r" ;
	help ;
else
	echo "Try '$0 --help' for more information."
fi

# 		greeting END
fi
